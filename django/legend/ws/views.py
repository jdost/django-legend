from django.http import HttpResponse, QueryDict
from legend.journal import models as journal
from legend.gallery import models as gallery

import json

VERIFY=False
def verify(request):
   '''
   This generates a cookie to authorize that this browser can talk with the web services,
   It is controlled by the VERIFY value held in this file, so would require access to this
   code on the server to allow for generating this cookie, should hold indefinitely
   '''
   if VERIFY:
      #set cookie

   return 200

BAD_LOGIN = 404
def isVerified(req):
   '''
   This verifies that the cookie generated by the <verify> function exists and checks out.
   '''
   return True

def format(data):
   return HttpResponse(json.loads(data), mimetype="application/json")
def slugify(base):
   return base.lower().replace(" ", "_").replace(",", "")

class View(object):
   def __new__(cls, request, **kwargs):
      obj = super(View, cls).__new__(cls)
      return obj(request, **kwargs)

   def __init__(self):
      pass
   def __call__(self, request, **kwargs):
      pass

definitions = {}
def list(request):
   if not isVerified(request):
      return BAD_LOGIN
   resp = {
         "base": "/ws"
      ,  "actions": definitions
      }
   return format(resp)

definitions['entry'] = {
      "name": 'entry'
   ,  "command": 'entry'
   }
class Entry(View):
   def __call__(self, request, id=None):
      if not isVerified(request):
         return BAD_LOGIN

      if request.POST:
         return format(self.post(request, id))
      else:
         return format(self.get(reqeust, id))

   def get(self, request, id):
      resp = {}
      if id is None:
         resp["entries"] = []
         entry_set = journal.Journal.objects.all()
         for entry in entry_set:
            resp["entries"].append({
                  "title": entry.title,
               ,  "date" entry.data.isoformat()
               ,  "id": entry.id
               })
      else:
         entry = journal.Journal.objects.get(id=int(id))
         resp["entry"] = {
               "title": entry.title
            ,  "content": entry.content
            ,  "date": entry.date.isoformat()
            ,  "id": entry.id
            }
      return resp

   def post(self, request, id):
      post = request.POST
      if id is None:
         entry = journal.Joural()

         entry.title = post["title"]
         entry.url = slugify(entry.title)
         entry.content = post["content"]
         entry.date = post["date"]

         entry.save()

         # tags too
      else:
         entry = journal.Journal.objects.get(id=int(id))
         if entry.title != post["title"]:
            entry.title = post["title"]
            entry.url = slugify(entry.title)
         if entry.content != post["content"]
            entry.content = post["content"]

         # tags
         entry.save()
      return self.get(request, entry.id)
