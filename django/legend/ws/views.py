from django.http import HttpResponse, QueryDict
from legend.journal import models as journal
from legend.gallery import models as gallery

import json

VERIFY=False
def verify(request):
   '''
   This generates a cookie to authorize that this browser can talk with the web services,
   It is controlled by the VERIFY value held in this file, so would require access to this
   code on the server to allow for generating this cookie, should hold indefinitely
   '''
   response = HttpResponse(status=202)
   if VERIFY:
      response.set_cookie('wsAuth', value='1',
            max_age=60*60*24*7)

   return response

BAD_LOGIN = HttpResponse(status=401)
def isVerified(req):
   '''
   This verifies that the cookie generated by the <verify> function exists and checks out.
   '''
   if 'wsAuth' not in req.COOKIES:
      return False
   val = req.COOKIES['wsAuth']
   return val is '1'

def format(data):
   return HttpResponse(json.dumps(data), mimetype="application/json")
def slugify(base):
   return base.lower().replace(" ", "_").replace(",", "")

class View(object):
   def __new__(cls, request, **kwargs):
      obj = super(View, cls).__new__(cls)
      return obj(request, **kwargs)

   def __init__(self):
      pass
   def __call__(self, request, **kwargs):
      pass

definitions = {}
def list(request):
   if not isVerified(request):
      return BAD_LOGIN
   resp = {
         "base": "/ws"
      ,  "actions": definitions
      }
   return format(resp)

definitions['entry'] = {
      "name": 'entry'
   ,  "command": 'entry'
   }
class Entry(View):
   def __call__(self, request, id=None):
      if not isVerified(request):
         return BAD_LOGIN

      if request.method == 'POST':
         return format(self.post(request, id))
      elif request.method == 'GET':
         return format(self.get(request, id))
      elif request.method == 'PUT':
         return format(self.put(request, id))
      elif request.method == 'DELETE':
         return format(self.delete(request, id))

   def get(self, request, id):
      resp = {}
      if id is None:
         resp["entries"] = []
         entry_set = journal.Journal.objects.all().values('title', 'date', 'id')
         for entry in entry_set:
            resp["entries"].append({
                  "title": entry["title"]
               ,  "date": entry["date"].isoformat()
               ,  "id": entry["id"]
               })
      else:
         entry = journal.Journal.objects.get(id=int(id))
         tags = []
         for tag in entry.tags.all():
            tags.append(tag.id)

         resp["entry"] = {
               "title": entry.title
            ,  "content": entry.content
            ,  "date": entry.date.isoformat()
            ,  "id": entry.id
            ,  "tags": tags
            }
      return resp

   def post(self, request, id):
      post = request.POST
      if id is None:
         entry = journal.Journal()

         entry.title = post["title"]
         entry.url = slugify(entry.title)
         entry.content = post["content"]
         entry.date = post["date"]

         entry.save()

         # tags too
         tags = json.loads(post["tags"])
         for tag in tags:
            try:
               tagObj = journal.Tag.objects.get(id=int(tag))
            except ValueError:
               tagObj = journal.Tag.objects.create(name=tag, url=slugify(tag))
               tagObj.save()
            entry.tags.add(tagObj)
      else:
         entry = journal.Journal.objects.get(id=int(id))
         if entry.title != post["title"]:
            entry.title = post["title"]
            entry.url = slugify(entry.title)
         if entry.content != post["content"]:
            entry.content = post["content"]

         entry.save()

         tags = json.loads(post["tags"])
         for tag in tags:
            try:
               tagObj = journal.Tag.objects.get(id=int(tag))
            except ValueError:
               tagObj = journal.Tag.objects.create(name=tag, url=slugify(tag))
               tagObj.save()
            entry.tags.add(tagObj)

      return self.get(request, entry.id)

   def put(self, request, id):
      return {}

   def delete(self, request, id):
      entry = journal.Journal.objects.get(id=int(id))
      entry.delete()
      return {}

definitions['tag'] = {
      "name": 'tag'
   ,  "command": 'tag'
   }
class Tag(View):
   def __call__(self, request, id=None):
      if not isVerified(request):
         return BAD_LOGIN

      if request.POST:
         return format(self.post(request, id))
      else:
         return format(self.get(request, id))

   def get(self, request, id):
      if id is None:
         resp = {"tags": []}
         tag_set = journal.Tag.objects.all()
         for tag in tag_set:
            resp["tags"].append({
               "name": tag.name
            ,  "id": tag.id
            ,  "count": tag.journal_set.count()
            })
      else:
         tag = journal.Tag.objects.get(id=int(id))
         resp = {"tag": {
               "name": tag.name
            ,  "id": tag.id
            },
            "entries": [],
         }
         tagged = tag.journal_set.all().values('id', 'title', 'date')
         entries = journal.Journal.objects.all().values('id', 'title', 'date')
         for entry in entries:
            entry["tagged"] = entry in tagged
            entry["date"] = entry["date"].isoformat()
            resp["entries"].append(entry)

      return resp

   def post(self, request, id):
      if id is None :
         resp = {}
      else :
         tag = journal.Tag.objects.get(id=int(id))
         additions = json.loads(request.POST["additions"])
         removals = json.loads(request.POST["removals"])
         for entry_id in additions:
            entry = journal.Journal.objects.get(id=int(entry_id))
            entry.tags.add(tag)
         for entry_id in removals:
            entry = journal.Journal.objects.get(id=int(entry_id))
            entry.tags.remove(tag)
         resp = {}
      return resp
